import { useState, useCallback } from 'react';

export function useAsync<T, P extends any[] = any[]>(
  asyncFn: (...args: P) => Promise<T>,
  onSuccess?: (result: T) => void,
  onError?: (error: unknown) => void
) {
  const [data, setData] = useState<T | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  const execute = useCallback(async (...args: P): Promise<T | null> => {
    setIsLoading(true);
    setError(null);
    try {
      const result = await asyncFn(...args);
      setData(result);
      onSuccess?.(result);
      return result;
    } catch (err) {
      const typedError = err instanceof Error ? err : new Error('Unknown error');
      setError(typedError);
      onError?.(typedError);
      throw typedError;
    } finally {
      setIsLoading(false);
    }
  }, [asyncFn, onSuccess, onError]);

  return { data, execute, isLoading, error };
}
